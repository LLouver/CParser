#include <string>
#include <map>

#include "include/Symbol.h"

using std::map;
using std::string;

extern const map<string, Symbol> KEYWORD_STR2TAG = {
	{"int",Symbol::kw_int},
	{"void",Symbol::kw_void},
	{"if",Symbol::kw_if},
	{"else",Symbol::kw_else},
	{"while",Symbol::kw_while},
	{"return",Symbol::kw_return},
};

extern const map<string, Symbol> STR2TAG = {
	{"epsilon"			,Symbol::epsilon},
	{"the_end"			,Symbol::the_end},
	{"id"				,Symbol::id},
	{"num"				,Symbol::num},
	{"+"				,Symbol::sb_add},
	{"-"				,Symbol::sb_sub},
	{"*"				,Symbol::sb_mult},
	{"/"				,Symbol::sb_div},
	{"="				,Symbol::sb_assign},
	{"=="				,Symbol::sb_equal},
	{">"				,Symbol::sb_more},
	{">="				,Symbol::sb_more_equal},
	{"<"				,Symbol::sb_less},
	{"<="				,Symbol::sb_less_equal},
	{"!="				,Symbol::sb_not_equal},
	{";"				,Symbol::sb_semicolon},
	{","				,Symbol::sb_comma},
	{"("				,Symbol::sb_left_parenthesis},
	{")"				,Symbol::sb_right_parenthesis},
	{"{"				,Symbol::sb_left_brace},
	{"}"				,Symbol::sb_right_brace},
	{"int"				,Symbol::kw_int},
	{"void"				,Symbol::kw_void},
	{"if"				,Symbol::kw_if},
	{"else"				,Symbol::kw_else},
	{"while"			,Symbol::kw_while},
	{"return"			,Symbol::kw_return},

	{"program"			,Symbol::program},
	{"dec_list"			,Symbol::dec_list},
	{"dec"				,Symbol::dec},
	{"dec_type"			,Symbol::dec_type},
	{"func_dec"			,Symbol::func_dec},
	{"var_dec"			,Symbol::var_dec},
	{"params"			,Symbol::params},
	{"stat_block"		,Symbol::stat_block},
	{"param_list"		,Symbol::param_list},
	{"param"			,Symbol::param},
	{"pre_param"		,Symbol::pre_param},
	{"in_dec"			,Symbol::in_dec},
	{"stat_str"			,Symbol::stat_str},
	{"in_var_dec"		,Symbol::in_var_dec},
	{"pre_in_var_dec"	,Symbol::pre_in_var_dec},
	{"stat"				,Symbol::stat},
	{"if_stat"			,Symbol::if_stat},
	{"while_stat"		,Symbol::while_stat},
	{"return_stat"		,Symbol::return_stat},
	{"assign_stat"		,Symbol::assign_stat},
	{"expr"				,Symbol::expr},
	{"add_expr"			,Symbol::add_expr},
	{"comp_add_expr"	,Symbol::comp_add_expr},
	{"comp_operator"	,Symbol::comp_operator},
	{"term"				,Symbol::term},
	{"pre_term"			,Symbol::pre_term},
	{"factor"			,Symbol::factor},
	{"pre_factor"		,Symbol::pre_factor},
	{"func_type"		,Symbol::func_type},
	{"call"				,Symbol::call},
	{"argus"			,Symbol::argus},
	{"argu_list"		,Symbol::argu_list},
	{"pre_expr"			,Symbol::pre_expr},
};

#ifdef DEBUG
extern const map<Symbol, string> TAG2STR = {
	{Symbol::epsilon		,"epsilon"},
	{Symbol::the_end		,"the_end"},
	{Symbol::id			,"id"},
	{Symbol::num			,"num"},
	{Symbol::sb_add			,"+"},
	{Symbol::sb_sub			,"-"},
	{Symbol::sb_mult			,"*"},
	{Symbol::sb_div			,"/"},
	{Symbol::sb_assign			,"="},
	{Symbol::sb_equal			,"=="},
	{Symbol::sb_more			,"&gt;"},
	{Symbol::sb_more_equal			,"&gt;="},
	{Symbol::sb_less			,"&lt;"},
	{Symbol::sb_less_equal			,"&lt;="},
	{Symbol::sb_not_equal			,"!="},
	{Symbol::sb_semicolon			,";"},
	{Symbol::sb_comma			,","},
	{Symbol::sb_left_parenthesis			,"("},
	{Symbol::sb_right_parenthesis			,")"},
	{Symbol::sb_left_brace			,"{"},
	{Symbol::sb_right_brace			,"}"},
	{Symbol::kw_int			,"int"},
	{Symbol::kw_void		,"void"},
	{Symbol::kw_if			,"if"},
	{Symbol::kw_else		,"else"},
	{Symbol::kw_while		,"while"},
	{Symbol::kw_return		,"return"},

	{Symbol::S0            ,"S0"},
	{Symbol::program		,"program"},
	{Symbol::dec_list		,"dec_list"},
	{Symbol::dec			,"dec"},
	{Symbol::dec_type		,"dec_type"},
	{Symbol::func_dec		,"func_dec"},
	{Symbol::var_dec		,"var_dec"},
	{Symbol::params		,"params"},
	{Symbol::stat_block	,"stat_block"},
	{Symbol::param_list	,"param_list"},
	{Symbol::param			,"param"},
	{Symbol::pre_param		,"pre_param"},
	{Symbol::in_dec		,"in_dec"},
	{Symbol::stat_str		,"stat_str"},
	{Symbol::in_var_dec	,"in_var_dec"},
	{Symbol::pre_in_var_dec,"pre_in_var_dec"},
	{Symbol::stat			,"stat"},
	{Symbol::if_stat		,"if_stat"},
	{Symbol::while_stat	,"while_stat"},
	{Symbol::return_stat	,"return_stat"},
	{Symbol::assign_stat	,"assign_stat"},
	{Symbol::expr			,"expr"},
	{Symbol::add_expr		,"add_expr"},
	{Symbol::comp_add_expr	,"comp_add_expr"},
	{Symbol::comp_operator	,"comp_operator"},
	{Symbol::term			,"term"},
	{Symbol::pre_term		,"pre_term"},
	{Symbol::factor		,"factor"},
	{Symbol::pre_factor	,"pre_factor"},
	{Symbol::func_type		,"func_type"},
	{Symbol::call			,"call"},
	{Symbol::argus			,"argus"},
	{Symbol::argu_list		,"argu_list"},
	{Symbol::pre_expr		,"pre_expr"},
};
#endif // DEBUG
